openapi: 3.0.0
info:
  title: The race cars
  contact:
    email: loi.tra@9thwonder.com
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/
  - url: https://virtserver.swaggerhub.com/annguyen9w/hapi-starter/1.0.0
    description: SwaggerHub API Auto Mocking
paths:
  /classes:
    get:
      tags:
        - Class
      summary: Get all class
      operationId: getClasses
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        # '400':
        #   $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Class
      summary: Add a new class to the system
      operationId: addClass
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /classes/{classId}:
    get:
      tags:
        - Class
      summary: Find class by ID
      operationId: getClassById
      parameters:
        - name: classId
          in: path
          description: ID of class to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Class
      summary: Update an existing class
      operationId: updateClass
      parameters:
        - name: classId
          in: path
          description: Class id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Class
      summary: Delete a class
      operationId: deleteClass
      parameters:
        - name: classId
          in: path
          description: Class id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /addresses:
    get:
      tags:
        - Address
      summary: Get all address
      operationId: getAddresses
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        # '400':
        #   $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Address
      summary: Add a new address to the system
      operationId: addAddress
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /addresses/{addressId}:
    get:
      tags:
        - Address
      summary: Find address by ID
      operationId: getAddressById
      parameters:
        - name: addressId
          in: path
          description: ID of address to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Address
      summary: Update an existing address
      operationId: updateAddress
      parameters:
        - name: addressId
          in: path
          description: Address id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Address
      summary: Delete a address
      operationId: deleteAddress
      parameters:
        - name: addressId
          in: path
          description: Address id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /drivers:
    get:
      tags:
        - Driver
      summary: Get all driver
      operationId: getDrivers
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverResponse'
        # '400':
        #   $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Driver
      summary: Add a new driver to the system
      operationId: addDriver
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /drivers/{driverId}:
    get:
      tags:
        - Driver
      summary: Find driver by ID
      operationId: getDriverById
      parameters:
        - name: driverId
          in: path
          description: ID of driver to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Driver
      summary: Update an existing driver
      operationId: updateDriver
      parameters:
        - name: driverId
          in: path
          description: Driver id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Driver
      summary: Delete a driver
      operationId: deleteDriver
      parameters:
        - name: driverId
          in: path
          description: Driver id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /drivers/{driverId}/results:
    get:
      tags:
        - Driver
      summary: All race results for that driver
      operationId: getRaceResultsByDriverId
      parameters:
        - name: driverId
          in: path
          description: ID of driver to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaceResult'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /teams:
    get:
      tags:
        - Team
      summary: Get all team
      operationId: getTeams
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'
        # '400':
        #   $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Team
      summary: Add a new team to the system
      operationId: addTeam
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /teams/{teamId}:
    get:
      tags:
        - Team
      summary: Find team by ID
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          description: ID of team to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Team
      summary: Update an existing team
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          description: Team id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Team
      summary: Delete a team
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          description: Team id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /cars:
    get:
      tags:
        - Car
      summary: Get all car
      operationId: getCars
      parameters:
        - name: make
          in: query
          description: Make values that need to be considered for filter
          required: false
          schema:
            type: string
            example: Ferrari
        - name: model
          in: query
          description: Model values that need to be considered for filter
          required: false
          schema:
            type: string
            example: 488 GTE-LM
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Car
      summary: Add a new car to the system
      operationId: addCar
      requestBody:
        $ref: '#/components/requestBodies/Car'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /cars/{carId}:
    get:
      tags:
        - Car
      summary: Find car by ID
      operationId: getCarById
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Car
      summary: Update an existing car
      operationId: updateCar
      parameters:
        - name: carId
          in: path
          description: Car id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Car'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Car
      summary: Delete a car
      operationId: deleteCar
      parameters:
        - name: carId
          in: path
          description: Car id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /cars/{carId}/results:
    get:
      tags:
        - Car
      summary: All race results for that car
      operationId: getRaceResultsByCarId
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaceResult'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /races:
    get:
      tags:
        - Race
      summary: Get all race
      operationId: getRaces
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Race'
        # '400':
        #   $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Race
      summary: Add a new race to the system
      operationId: addRace
      requestBody:
        $ref: '#/components/requestBodies/CreateRace'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /races/{raceId}:
    get:
      tags:
        - Race
      summary: Find race by ID
      operationId: getRaceById
      parameters:
        - name: raceId
          in: path
          description: ID of race to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Race'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
        - Race
      summary: Update an existing race
      operationId: updateRace
      parameters:
        - name: raceId
          in: path
          description: Race id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRace'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Race
      summary: Delete a race
      operationId: deleteRace
      parameters:
        - name: raceId
          in: path
          description: Race id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /races/{raceId}/results:
    get:
      tags:
        - Race
      summary: All race results for that race
      operationId: getRaceResultsByRaceId
      parameters:
        - name: raceId
          in: path
          description: ID of race to return
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaceResult'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      tags:
        - Race
      summary: Add race results for that race
      operationId: addRaceResults
      parameters:
        - name: raceId
          in: path
          description: ID of race to add
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/AddRaceResult'
      responses:
        '201':
          description: Created. Successful operation
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
  /race-results/{raceResultId}:
    put:
      tags:
        - Race Result
      summary: Update an existing race result
      operationId: updateRaceResult
      parameters:
        - name: raceResultId
          in: path
          description: Race result id need to be updated
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/RaceResult'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Race Result
      summary: Delete a race result
      operationId: deleteRaceResult
      parameters:
        - name: raceResultId
          in: path
          description: Race result id to delete
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: 40e6215d-b5c6-4896-987c-f30f3678f608
    ClassRequestBody:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: LM GTE AM
    Class:
      allOf:
        - required:
            - id
          type: object
          properties:
            id:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/ClassRequestBody'
    AddressRequestBody:
      required:
        - city
        - country
        - state
        - zipcode
      type: object
      properties:
        street:
          type: string
          example: 1797 Colonial Drive
        street2:
          type: string
          example: 411 Patterson Street
        city:
          type: string
          example: Houston
        state:
          type: string
          example: Texas
        zipcode:
          type: string
          example: '77002'
        country:
          type: string
          example: United States
    Address:
      allOf:
        - required:
            - id
          type: object
          properties:
            id:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/AddressRequestBody'
    DriverRequestBody:
      required:
        - firstName
        - lastName
        - nationality
      type: object
      properties:
        firstName:
          type: string
          example: Nguyen
        lastName:
          type: string
          example: An
        nationality:
          type: string
          enum:
            - USA
            - Viet Nam
        homeAddress:
          $ref: '#/components/schemas/UUID'
        managementAddress:
          $ref: '#/components/schemas/UUID'
    Driver:
      required:
        - firstName
        - id
        - lastName
        - nationality
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        firstName:
          type: string
          example: Nguyen
        lastName:
          type: string
          example: An
        nationality:
          type: string
          enum:
            - USA
            - Viet Nam
        homeAddress:
          $ref: '#/components/schemas/Address'
        managementAddress:
          $ref: '#/components/schemas/Address'
    DriverResponse:
      allOf:
        - $ref: '#/components/schemas/Driver'
        - required:
            - teams
          type: object
          properties:
            teams:
              type: array
              items:
                $ref: '#/components/schemas/Team'
    TeamRequestBody:
      required:
        - name
        - nationality
      type: object
      properties:
        name:
          type: string
          example: 7 TOYOTA GAZOO RACING
        nationality:
          type: string
          enum:
            - USA
            - Viet Nam
        businessAddress:
          $ref: '#/components/schemas/UUID'
        drivers:
          type: array
          items:
            $ref: '#/components/schemas/UUID'
    Team:
      required:
        - cars
        - id
        - name
        - nationality
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: 7 TOYOTA GAZOO RACING
        nationality:
          type: string
          enum:
            - USA
            - Viet Nam
        businessAddress:
          $ref: '#/components/schemas/Address'
    TeamResponse:
      allOf:
        - $ref: '#/components/schemas/Team'
        - required:
            - car
          type: object
          properties:
            cars:
              type: array
              items:
                $ref: '#/components/schemas/Car'
            drivers:
              type: array
              items:
                $ref: '#/components/schemas/Driver'
    CarRequestBody:
      required:
        - class
        - make
        - model
        - team
      type: object
      properties:
        make:
          type: string
          example: Ferrari
        model:
          type: string
          example: 488 GTE-LM
        class:
          $ref: '#/components/schemas/UUID'
        team:
          $ref: '#/components/schemas/UUID'
    Car:
      required:
        - class
        - make
        - model
        - team
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        make:
          type: string
          example: Ferrari
        model:
          type: string
          example: 488 GTE-LM
        class:
          $ref: '#/components/schemas/Class'
    CarResponse:
      allOf:
        - $ref: '#/components/schemas/Car'
        - required:
            - team
          type: object
          properties:
            team:
              $ref: '#/components/schemas/Team'
    RaceRequestBody:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Le Mans
    Race:
      required:
        - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Le Mans
    RaceResultRequestBody:
      required:
        - car
        - class
        - driver
        - raceNumber
        - startPosition
      type: object
      properties:
        car:
          $ref: '#/components/schemas/UUID'
        driver:
          $ref: '#/components/schemas/UUID'
        class:
          $ref: '#/components/schemas/UUID'
        raceNumber:
          type: string
          example: '200'
        startPosition:
          minimum: 1
          type: integer
          example: 2
        finishPosition:
          minimum: 1
          type: integer
          example: 3
    RaceResult:
      required:
        - car
        - class
        - driver
        - id
        - race
        - raceNumber
        - startPosition
      type: object
      properties:
        id:
          type: string
          format: uuid
        race:
          $ref: '#/components/schemas/Race'
        car:
          $ref: '#/components/schemas/Car'
        driver:
          $ref: '#/components/schemas/Driver'
        class:
          $ref: '#/components/schemas/Class'
        raceNumber:
          type: string
          example: '200'
        startPosition:
          minimum: 1
          type: integer
          example: 2
        finishPosition:
          minimum: 1
          type: integer
          example: 3
  requestBodies:
    Class:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClassRequestBody'
      required: true
    Address:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressRequestBody'
      required: true
    Driver:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverRequestBody'
      required: true
    Team:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamRequestBody'
      required: true
    Car:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CarRequestBody'
      required: true
    CreateRace:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/RaceRequestBody'
              - type: object
                properties:
                  raceResults:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaceResultRequestBody'
      required: true
    UpdateRace:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RaceRequestBody'
      required: true
    AddRaceResult:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RaceResultRequestBody'
      required: true
    RaceResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RaceResultRequestBody'
      required: true
  responses:
    201Created:
      description: Created. Successful operation
      content:
        text/plain; charset=utf-8:
          schema:
            $ref: '#/components/schemas/UUID'
    204NoContent:
      description: No Content. Successful operation
    400BadRequest:
      description: Bad Request. Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode: 
                type: integer
                default: 400
              error:
                type: string
                default: Bad Request
              message:
                type: string
                default: Invalid request input
            required:
              - statusCode
              - error
              - message
    404NotFound:
      description: Not Found. URL or item not found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode: 
                type: integer
                default: 404
              error:
                type: string
                default: Not Found
              message:
                type: string
                default: Not Found
            required:
              - statusCode
              - error
              - message