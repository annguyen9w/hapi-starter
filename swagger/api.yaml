---
openapi: 3.0.0
info:
  title: The race cars
  contact:
    email: loi.tra@9thwonder.com
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/annguyen9w/hapi-starter/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8080/api/
paths:
  /classes:
    get:
      tags:
      - Class
      summary: Get all class
      operationId: getClasses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        "400":
          description: Invalid input
    post:
      tags:
      - Class
      summary: Add a new class to the system
      operationId: addClass
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /classes/{classId}:
    get:
      tags:
      - Class
      summary: Find class by ID
      operationId: getClassById
      parameters:
      - name: classId
        in: path
        description: ID of class to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
    put:
      tags:
      - Class
      summary: Update an existing class
      operationId: updateClass
      parameters:
      - name: classId
        in: path
        description: Class id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
    delete:
      tags:
      - Class
      summary: Delete a class
      operationId: deleteClass
      parameters:
      - name: classId
        in: path
        description: Class id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
  /addresses:
    get:
      tags:
      - Address
      summary: Get all address
      operationId: getAddresses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        "400":
          description: Invalid input
    post:
      tags:
      - Address
      summary: Add a new address to the system
      operationId: addAddress
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /addresses/{addressId}:
    get:
      tags:
      - Address
      summary: Find address by ID
      operationId: getAddressById
      parameters:
      - name: addressId
        in: path
        description: ID of address to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          description: Invalid ID supplied
        "404":
          description: Address not found
    put:
      tags:
      - Address
      summary: Update an existing address
      operationId: updateAddress
      parameters:
      - name: addressId
        in: path
        description: Address id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Address not found
    delete:
      tags:
      - Address
      summary: Delete a address
      operationId: deleteAddress
      parameters:
      - name: addressId
        in: path
        description: Address id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Address not found
  /drivers:
    get:
      tags:
      - Driver
      summary: Get all driver
      operationId: getDrivers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
        "400":
          description: Invalid input
    post:
      tags:
      - Driver
      summary: Add a new driver to the system
      operationId: addDriver
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /drivers/{driverId}:
    get:
      tags:
      - Driver
      summary: Find driver by ID
      operationId: getDriverById
      parameters:
      - name: driverId
        in: path
        description: ID of driver to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
    put:
      tags:
      - Driver
      summary: Update an existing driver
      operationId: updateDriver
      parameters:
      - name: driverId
        in: path
        description: Driver id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
    delete:
      tags:
      - Driver
      summary: Delete a driver
      operationId: deleteDriver
      parameters:
      - name: driverId
        in: path
        description: Driver id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
  /teams:
    get:
      tags:
      - Team
      summary: Get all team
      operationId: getTeams
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'
        "400":
          description: Invalid input
    post:
      tags:
      - Team
      summary: Add a new team to the system
      operationId: addTeam
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /teams/{teamId}:
    get:
      tags:
      - Team
      summary: Find team by ID
      operationId: getTeamById
      parameters:
      - name: teamId
        in: path
        description: ID of team to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
        "400":
          description: Invalid ID supplied
        "404":
          description: Team not found
    put:
      tags:
      - Team
      summary: Update an existing team
      operationId: updateTeam
      parameters:
      - name: teamId
        in: path
        description: Team id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Team not found
    delete:
      tags:
      - Team
      summary: Delete a team
      operationId: deleteTeam
      parameters:
      - name: teamId
        in: path
        description: Team id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Team not found
  /cars:
    get:
      tags:
      - Car
      summary: Get all car
      operationId: getCars
      parameters:
      - name: make
        in: query
        description: Make values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Ferrari
      - name: model
        in: query
        description: Model values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 488 GTE-LM
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'
        "400":
          description: Invalid input
    post:
      tags:
      - Car
      summary: Add a new car to the system
      operationId: addCar
      requestBody:
        $ref: '#/components/requestBodies/Car'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /cars/{carId}:
    get:
      tags:
      - Car
      summary: Find car by ID
      operationId: getCarById
      parameters:
      - name: carId
        in: path
        description: ID of car to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
    put:
      tags:
      - Car
      summary: Update an existing car
      operationId: updateCar
      parameters:
      - name: carId
        in: path
        description: Car id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Car'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
    delete:
      tags:
      - Car
      summary: Delete a car
      operationId: deleteCar
      parameters:
      - name: carId
        in: path
        description: Car id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
  /races:
    get:
      tags:
      - Race
      summary: Get all race
      operationId: getRaces
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaceResponse'
        "400":
          description: Invalid input
    post:
      tags:
      - Race
      summary: Add a new race to the system
      operationId: addRace
      requestBody:
        $ref: '#/components/requestBodies/Race'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /races/{raceId}:
    get:
      tags:
      - Race
      summary: Find race by ID
      operationId: getRaceById
      parameters:
      - name: raceId
        in: path
        description: ID of race to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaceResponse'
        "400":
          description: Invalid ID supplied
        "404":
          description: Race not found
    put:
      tags:
      - Race
      summary: Update an existing race
      operationId: updateRace
      parameters:
      - name: raceId
        in: path
        description: Race id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/Race'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Race not found
    delete:
      tags:
      - Race
      summary: Delete a race
      operationId: deleteRace
      parameters:
      - name: raceId
        in: path
        description: Race id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Race not found
  /race-cars:
    get:
      tags:
      - RaceCar
      summary: Get all race car
      operationId: getRaceCars
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaceCar'
        "400":
          description: Invalid input
    post:
      tags:
      - RaceCar
      summary: Add a new race car to the system
      operationId: addRaceCar
      requestBody:
        $ref: '#/components/requestBodies/RaceCar'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /race-cars/{raceCarId}:
    get:
      tags:
      - RaceCar
      summary: Find race car by ID
      operationId: getRaceCarById
      parameters:
      - name: raceCarId
        in: path
        description: ID of race car to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaceCar'
        "400":
          description: Invalid ID supplied
        "404":
          description: RaceCar not found
    put:
      tags:
      - RaceCar
      summary: Update an existing race car
      operationId: updateRaceCar
      parameters:
      - name: raceCarId
        in: path
        description: RaceCar id need to be updated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        $ref: '#/components/requestBodies/RaceCar'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: RaceCar not found
    delete:
      tags:
      - RaceCar
      summary: Delete a race car
      operationId: deleteRaceCar
      parameters:
      - name: raceCarId
        in: path
        description: RaceCar id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: RaceCar not found
components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: 40e6215d-b5c6-4896-987c-f30f3678f608
    ClassRequestBody:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: LM GTE AM
    Class:
      allOf:
      - required:
        - id
        type: object
        properties:
          id:
            $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/ClassRequestBody'
    AddressRequestBody:
      required:
      - city
      - country
      - state
      - zipcode
      type: object
      properties:
        street:
          type: string
          example: 1797 Colonial Drive
        street2:
          type: string
          example: 411 Patterson Street
        city:
          type: string
          example: Houston
        state:
          type: string
          example: Texas
        zipcode:
          type: string
          example: "77002"
        country:
          type: string
          example: United States
    Address:
      allOf:
      - required:
        - id
        type: object
        properties:
          id:
            $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/AddressRequestBody'
    DriverRequestBody:
      required:
      - firstName
      - lastName
      - nationality
      type: object
      properties:
        firstName:
          type: string
          example: Nguyen
        lastName:
          type: string
          example: An
        nationality:
          type: string
          enum:
          - USA
          - Viet Nam
        homeAddress:
          $ref: '#/components/schemas/UUID'
        managementAddress:
          $ref: '#/components/schemas/UUID'
    Driver:
      required:
      - firstName
      - id
      - lastName
      - nationality
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        firstName:
          type: string
          example: Nguyen
        lastName:
          type: string
          example: An
        nationality:
          type: string
          enum:
          - USA
          - Viet Nam
        homeAddress:
          $ref: '#/components/schemas/Address'
        managementAddress:
          $ref: '#/components/schemas/Address'
    TeamRequestBody:
      required:
      - name
      - nationality
      type: object
      properties:
        name:
          type: string
          example: 7 TOYOTA GAZOO RACING
        nationality:
          type: string
          enum:
          - USA
          - Viet Nam
        businessAddress:
          $ref: '#/components/schemas/UUID'
    Team:
      required:
      - cars
      - id
      - name
      - nationality
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: 7 TOYOTA GAZOO RACING
        nationality:
          type: string
          enum:
          - USA
          - Viet Nam
        businessAddress:
          $ref: '#/components/schemas/Address'
    TeamResponse:
      allOf:
      - $ref: '#/components/schemas/Team'
      - required:
        - car
        type: object
        properties:
          cars:
            type: array
            items:
              $ref: '#/components/schemas/Car'
    CarRequestBody:
      required:
      - class
      - make
      - model
      - team
      type: object
      properties:
        make:
          type: string
          example: Ferrari
        model:
          type: string
          example: 488 GTE-LM
        class:
          $ref: '#/components/schemas/UUID'
        team:
          $ref: '#/components/schemas/UUID'
    Car:
      required:
      - class
      - make
      - model
      - team
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        make:
          type: string
          example: Ferrari
        model:
          type: string
          example: 488 GTE-LM
        class:
          $ref: '#/components/schemas/Class'
    CarResponse:
      allOf:
      - $ref: '#/components/schemas/Car'
      - required:
        - team
        type: object
        properties:
          team:
            $ref: '#/components/schemas/Team'
    RaceRequestBody:
      required:
      - classes
      - name
      type: object
      properties:
        name:
          type: string
          example: Le Mans
        classes:
          type: array
          items:
            $ref: '#/components/schemas/UUID'
    Race:
      required:
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Le Mans
    RaceResponse:
      required:
      - classes
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Le Mans
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class'
        raceCars:
          type: array
          description: All cars run in race
          items:
            $ref: '#/components/schemas/RaceCar'
    RaceCarRequestBody:
      required:
      - car
      - class
      - driver
      - race
      - raceNumber
      - startPosition
      type: object
      properties:
        race:
          $ref: '#/components/schemas/UUID'
        car:
          $ref: '#/components/schemas/UUID'
        driver:
          $ref: '#/components/schemas/UUID'
        class:
          $ref: '#/components/schemas/UUID'
        raceNumber:
          type: string
          example: "123"
        startPosition:
          minimum: 1
          type: integer
          example: 5
        finishPosition:
          minimum: 1
          type: integer
          example: 11
    RaceCar:
      required:
      - car
      - class
      - driver
      - id
      - race
      - raceNumber
      - startPosition
      type: object
      properties:
        id:
          type: string
          format: uuid
        race:
          $ref: '#/components/schemas/Race'
        car:
          $ref: '#/components/schemas/Car'
        driver:
          $ref: '#/components/schemas/Driver'
        class:
          $ref: '#/components/schemas/Class'
        raceNumber:
          type: string
          example: "123"
        startPosition:
          minimum: 1
          type: integer
          example: 5
        finishPosition:
          minimum: 1
          type: integer
          example: 11
      xml:
        name: RaceCar
  requestBodies:
    Class:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClassRequestBody'
      required: true
    Address:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressRequestBody'
      required: true
    Driver:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverRequestBody'
      required: true
    Team:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamRequestBody'
      required: true
    Car:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CarRequestBody'
      required: true
    Race:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RaceRequestBody'
      required: true
    RaceCar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RaceCarRequestBody'
      required: true
